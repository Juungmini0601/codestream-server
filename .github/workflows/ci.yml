name: CI

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Lint
        uses: gradle/gradle-build-action@v2
        with:
          arguments: spotlessCheck

      - name: Test
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: codestream/api-server
        run: |
            docker build -t $REGISTRY/$REPOSITORY:latest -f core-api/Dockerfile .
            docker push $REGISTRY/$REPOSITORY:latest

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          text: |
            *CodeStream API Server* 배포 완료!
            
            • *커밋*: ${{ github.sha }}
            • *브랜치*: ${{ github.ref_name }}
            • *이미지*: ${{ steps.login-ecr.outputs.registry }}/codestream/api-server:latest
            • *상태*: ${{ job.status == 'success' && '✅ 성공' || '❌ 실패' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
